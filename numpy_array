import numpy as np
arr1 = np.array([1, 2, 3, 4, 5])  # 1D array
arr2 = np.array([[1, 2, 3], [4, 5, 6]])  # 2D array (Matrix)
arr3 = np.zeros((3, 3))  # 3x3 array of zeros
arr4 = np.ones((2, 4))  # 2x4 array of ones
arr5 = np.arange(0, 10, 2)  # Array from 0 to 10 (step of 2)
arr6 = np.linspace(1, 10, 5)  # 5 evenly spaced numbers between 1 and 10
arr7 = np.random.rand(3, 3)  # 3x3 matrix with random values

print("1D Array:", arr1)
print("2D Array:\n", arr2)
print("Zeros Array:\n", arr3)
print("Ones Array:\n", arr4)
print("Arange Array:", arr5)
print("Linspace Array:", arr6)
print("Random Array:\n", arr7)

'''
results: 
1D Array: [1 2 3 4 5]
2D Array:
 [[1 2 3]
 [4 5 6]]
Zeros Array:
 [[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Note: here each number is followed by a period "." because the numbers are floats. 
To make data type to integers, use 
arr3 = np.zeros((3, 3), dtype=int)  # 3x3 array of zeros with integer type
Ones Array:
 [[1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Arange Array: [0 2 4 6 8]
Linspace Array: [ 1.    3.25  5.5   7.75 10.  ]
Random Array:
 [[0.55478736 0.79793268 0.34203762]
 [0.49941832 0.46354918 0.54877003]
 [0.7235956  0.79841194 0.96975965]]
Note: to create an array with 2-decimal random numbers, use:
arr7 = np.round(np.random.rand(3, 3), 2)  # 3x3 matrix with random values rounded to 2 decimal places
'''

# Modify the shape of an array:

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
print("Original shape:", arr.shape)  # (9,) - 1D array

arr2D = arr.reshape(3, 3)  # Convert to a 3x3 matrix
print("Reshaped 2D array:\n", arr2D.shape)

arr2D_2rows = arr.reshape(9, 1)  # Convert to a 1x9 matrix
print(arr2D_2rows)
print("Reshaped 2D array with 1 row:\n", arr2D_2rows.shape)

'''
Original shape: (9,)
Reshaped 2D array:
 (3, 3)
[[1]
 [2]
 [3]
 [4]
 [5]
 [6]
 [7]
 [8]
 [9]]
Reshaped 2D array with 1 row:
 (9, 1)
'''

matrix = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])

print(matrix[0, 1])  # Element at row 0, column 1 (Output: 20)
print(matrix[:, 1])  # All rows, second column
print(matrix[1, :])  # Second row
print(matrix[0:2, 1:3])  # Sub-matrix (rows 0-1, cols 1-2)

arr = np.array([1, 2, 3, 4, 5])

print(arr + 10)  # [11 12 13 14 15]
print(arr * 2)   # [2 4 6 8 10]
print(arr ** 2)  # Squaring each element
print(np.sqrt(arr))  # Square root
print(np.exp(arr))  # Exponential
print(np.mean(arr))  # Mean
print(np.sum(arr))  # Sum of elements

'''
[11 12 13 14 15]
[ 2  4  6  8 10]
[ 1  4  9 16 25]
[1.         1.41421356 1.73205081 2.         2.23606798]
[  2.71828183   7.3890561   20.08553692  54.59815003 148.4131591 ]
3.0
15
'''

A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])

print(A + B)  # Matrix addition
print(A * B)  # Element-wise multiplication
print(np.dot(A, B))  # Matrix multiplication
print(A.T)  # Transpose of matrix A

'''
[[ 6  8]
 [10 12]]
[[ 5 12]
 [21 32]]
[[19 22]
 [43 50]]
[[1 3]
 [2 4]]
'''

